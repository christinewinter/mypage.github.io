<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-04-17T11:10:39+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ice Cubes</title><subtitle>A Winter Blog</subtitle><entry><title type="html">An Ice Cube about Syntax Gotchas writing PySpark when knowing Pandas</title><link href="http://localhost:4000/python/learning/2021/03/30/pyspark-syntax-gotchas.html" rel="alternate" type="text/html" title="An Ice Cube about Syntax Gotchas writing PySpark when knowing Pandas" /><published>2021-03-30T10:03:30+02:00</published><updated>2021-03-30T10:03:30+02:00</updated><id>http://localhost:4000/python/learning/2021/03/30/pyspark-syntax-gotchas</id><content type="html" xml:base="http://localhost:4000/python/learning/2021/03/30/pyspark-syntax-gotchas.html">&lt;h2&gt;Syntax Gotchas writing PySpark when knowing Pandas &lt;/h2&gt;
&lt;p&gt;
If you have some basic knowledge in data analysis with Python Pandas and are curious about PySpark and don't know where to start, tag along.&lt;/p&gt;
&lt;p&gt;
    &lt;a href=&quot;https://pandas.pydata.org/&quot; target=&quot;_blank&quot;&gt;
    Python Pandas&lt;/a&gt; encouraged us to leave excel tables behind and to look at data from a coder perspective instead. Data sets became bigger
    and bigger, turned from data bases to data files and into data lakes. Some smart minds from
    &lt;a target=&quot;_blank&quot; href=&quot;http://spark.apache.org/&quot;&gt;
    Apache&lt;/a&gt; blessed us with the Scala based
    framework Spark to process the bigger amounts in a reasonable time. Since Python is the go to language for data science nowadays,
    there was a Python API available soon that’s called
    &lt;a href=&quot;https://spark.apache.org/docs/latest/api/python/index.html&quot; target=&quot;_blank&quot;&gt; PySpark&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
For a while now I am trying to conquer this Spark interface with its non-pythonic syntax that everybody in the big data world praises.
    It took me a few attempts and it’s still work in progress. However in this post I want to show you, who is also starting learning PySpark,
    how to replicate the same analysis you would otherwise do with Pandas.&lt;/p&gt;
&lt;p&gt;
The data analysis example we are going to look at you can find in the book
    &lt;a target=&quot;_blank&quot; href=&quot;https://wesmckinney.com/pages/book.html&quot;&gt;
    &quot;Python for Data Analysis&quot;&lt;/a&gt; by Wes McKinney.
    In that analysis, the aim is to find out the top ranked movies from the MovieLens 1M data set, which is
    acquired and maintained by the
    &lt;a href=&quot;https://grouplens.org/&quot; target=&quot;_blank&quot;&gt;
    GroupLens&lt;/a&gt; Research project from the University of Minnesota.&lt;/p&gt;
&lt;p&gt;
    As a coding framework I used
    &lt;a href=&quot;https://www.kaggle.com/&quot; target=&quot;_blank&quot;&gt;
    Kaggle&lt;/a&gt;, since it comes with the convenience of notebooks that have the basic data science modules installed and are ready to go with two clicks.
&lt;/p&gt;
&lt;p&gt;
   The complete analysis and the Pyspark code you can also find in
    &lt;a href=&quot;https://www.kaggle.com/christine12/movielens-1m-dataset-pyspark&quot; target=&quot;_blank&quot;&gt;
        &lt;b&gt;this Kaggle notebook&lt;/b&gt;&lt;/a&gt; and the Pandas code in
    &lt;a href=&quot;https://www.kaggle.com/christine12/movielens-1m-dataset-python-pandas&quot; target=&quot;_blank&quot;&gt;
        &lt;b&gt;this one&lt;/b&gt;&lt;/a&gt;. We won’t replicate the same analysis here, but instead focus on the syntax differences when
    handling Pandas and Pyspark dataframes. I will always show the Pandas code first following with the PySpark equivalent.
&lt;/p&gt;
&lt;p&gt;
The basic functions that we need for this analysis are:
&lt;ul&gt;
    &lt;li&gt;Loading data from csv format&lt;/li&gt;
    &lt;li&gt;Combining datasets from different tables&lt;/li&gt;
    &lt;li&gt;Extracting information&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Loading data&lt;/h4&gt;

&lt;p&gt;
Pandas has different
    &lt;a href=&quot;https://pandas.pydata.org/docs/reference/io.html&quot; target=&quot;_blank&quot;&gt;
    read functions&lt;/a&gt;, which make it easy to import data depending on the file type the data is stored in.
&lt;pre&gt;&lt;code&gt;
# Pandas
pd.read_table(path_to_file, sep='::', header=None, names=column_names, engine='python')
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    With PySpark we first need to create a
    &lt;a href=&quot;https://spark.apache.org/docs/latest/sql-getting-started.html&quot; target=&quot;_blank&quot;&gt;
    Spark Context&lt;/a&gt; as the entry point to Sparks functionality. Not that the indentation might not match when you copy-paste this into your code.
&lt;pre&gt;&lt;code&gt;
# PySpark
from pyspark.sql import SparkSession
spark = SparkSession.Builder().getOrCreate() #--&gt; Spark Context
spark.read                        #--&gt; what do you want to do
    .format(&quot;csv&quot;)                #--&gt; which format is the file
    .option(&quot;delimiter&quot;, &quot;::&quot;)    #--&gt; specify delimiter that's used
    .option(&quot;inferSchema&quot;, &quot;true&quot;)#--&gt; default value type is string
    .load(path_to_file)            #--&gt; file path
&lt;/code&gt; &lt;/pre&gt;
&lt;/p&gt;
&lt;h4&gt;Combining Datasets&lt;/h4&gt;

&lt;p&gt;
The default function for combining datasets in Pandas is
    &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;merge()&lt;/b&gt;&lt;/a&gt;,
    which combines datasets on one or
    multiple columns. Even Pandas &lt;b&gt;join()&lt;/b&gt; function uses merge with an index column under the hood. Ratings, users and movies are in this code snippet Pandas datframes that share respective columns, so we can just call the merge function. In the case of name mismatch, we would need to use the join() instead.
&lt;pre&gt;&lt;code&gt;
# Pandas
data = pd.merge(pd.merge(ratings, users), movies)
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
In PySpark there is no merge function, the default here is join() on a selection of columns. Otherwise it looks fairly similar.
&lt;pre&gt;&lt;code&gt;
# PySpark
data = ratings.join(users, [&quot;user_id&quot;]).join(movies, [&quot;movie_id&quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h4&gt;Extracting Information&lt;/h4&gt;

&lt;p&gt;
Now that we have our data in the form that we can work with we can take a look how to actually extract the content.
&lt;/p&gt;
&lt;h5&gt;Show row entries&lt;/h5&gt;
&lt;p&gt;
Pandas dataframes derive from numpy arrays and thereby elements can be accessed by using square backets. If we want to
    see the first 5 elements of a table we would do it in this way:
&lt;pre&gt;&lt;code&gt;
# Pandas
users[:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
In Spark dataframes are objects and therefore we need to use functions.
    In the case if showing the first 5 rows we can use &lt;b&gt;show()&lt;/b&gt; which derives from the underlying SQL syntax
    used by Spark dataframes. The function show is just a way to represent the dataset, if you would like to create a
    new dataframe from a selection of entries, you would need to use &lt;b&gt;take()&lt;/b&gt;.
&lt;pre&gt;&lt;code&gt;
# PySpark
users.show(5) # --&gt; print result
users.take(5) # --&gt; list of Row() objects
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h5&gt;Filtering&lt;/h5&gt;
&lt;p&gt;
In pandas, we can filter in different ways. One of the functions we can use is &lt;b&gt;loc&lt;/b&gt; which is a label based filter to access rows or columns. In the data analysis example, we want to filter all rows in a dataframe that occur in a list of titles.
&lt;pre&gt;&lt;code&gt;
# Pandas
mean_ratings = mean_ratings.loc[active_titles]
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
PySpark dataframes don’t support &lt;b&gt;loc&lt;/b&gt;, so instead we need to use the filter function.
    An easy way to handle columns in PySpark dataframes is the &lt;b&gt;col()&lt;/b&gt; function.
    Calling that one with the column name, will return the respective column from the dataframe.
&lt;pre&gt;&lt;code&gt;
# PySpark
from pyspark.sql.functions import col
mean_ratings = mean_ratings.filter(col('title').isin(active_titles))
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h5&gt;Grouping&lt;/h5&gt;
&lt;p&gt;
Grouping looks very similar in Pandas and PySpark with &lt;b&gt;groupby()&lt;/b&gt;. Pandas dataframes have a lot of
    &lt;a href=&quot;https://pandas.pydata.org/docs/reference/groupby.html&quot; target=&quot;_blank&quot;&gt;
    aggregating functions&lt;/a&gt; implemented for their group-by objects, like median, mean, sum, variance etc.
    For Pyspark dataframes, it is necessary to import them, for example from pyspark.sql.functions, like
    the &lt;b&gt;mean()&lt;/b&gt; and standard dev &lt;b&gt;stddev()&lt;/b&gt;.
&lt;pre&gt;&lt;code&gt;
# Pandas
ratings_by_title = data.groupby('title')['rating'].std()
# PySpark
from pyspark.sql.functions import mean, stddev
coldata_sdf.groupBy('title').agg(stddev(col('rating')).alias('std'))
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h5&gt;Pivot Table&lt;/h5&gt;
&lt;p&gt;
Pivot tables are commonly used in data analysis. Pandas dataframes arrange and aggregate all in one function
    &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html&quot; target=&quot;_blank&quot;&gt;
        &lt;b&gt;pivot_table&lt;/b&gt;&lt;/a&gt;.
&lt;pre&gt;&lt;code&gt;
# Pandas
mean_ratings = data.pivot_table('rating',
                                index='title',
                                columns='gender',
                                aggfunc='mean')
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
To replicate the same outcome with Pyspark dataframes, we need to concatenate the grouping, pivot and aggregation functions.
&lt;pre&gt;&lt;code&gt;
# PySpark
mean_ratings_pivot = data
                       .groupBy('title')
                       .pivot('gender')
                       .agg(mean('rating'))
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h5&gt;Sorting&lt;/h5&gt;
&lt;p&gt;
To sort the values in a column in ascending or descending order we can call the &lt;b&gt;sort_values()&lt;/b&gt; function for
    Pandas dataframes. Remember that the default sorting order is ascending.
&lt;pre&gt;&lt;code&gt;
# Pandas
top_female_ratings = mean_ratings.sort_values(by='F',
                                              ascending=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    In PySpark there is a similar function called &lt;b&gt;sort()&lt;/b&gt;, but the column that we want to sort, we have to give
    as an input. Similarly we could use the function &lt;b&gt;orderBy()&lt;/b&gt; and would receive the same result.
&lt;pre&gt;&lt;code&gt;
# PySpark
top_female_ratings = mean_ratings.sort(mean_ratings.F.desc())
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
    Over time the syntax of Pandas and PySpark will change. Maybe we are lucky and they will become more pythonic.
    There are also modules that combine provide and a Pandas API for PySpark, which is called
    &lt;a href=&quot;https://koalas.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot;&gt;
        Koalas&lt;/a&gt;.
    If its performance can compete with PySpark, we might see more of this in the future.
&lt;/p&gt;

&lt;p&gt;
    I hope you found some helpful tips and please let me know your insights from learning Spark, both syntax and functionality!
&lt;/p&gt;

&lt;p&gt;
    All the best,
    &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">Syntax Gotchas writing PySpark when knowing Pandas If you have some basic knowledge in data analysis with Python Pandas and are curious about PySpark and don't know where to start, tag along. Python Pandas encouraged us to leave excel tables behind and to look at data from a coder perspective instead. Data sets became bigger and bigger, turned from data bases to data files and into data lakes. Some smart minds from Apache blessed us with the Scala based framework Spark to process the bigger amounts in a reasonable time. Since Python is the go to language for data science nowadays, there was a Python API available soon that’s called PySpark. For a while now I am trying to conquer this Spark interface with its non-pythonic syntax that everybody in the big data world praises. It took me a few attempts and it’s still work in progress. However in this post I want to show you, who is also starting learning PySpark, how to replicate the same analysis you would otherwise do with Pandas. The data analysis example we are going to look at you can find in the book &quot;Python for Data Analysis&quot; by Wes McKinney. In that analysis, the aim is to find out the top ranked movies from the MovieLens 1M data set, which is acquired and maintained by the GroupLens Research project from the University of Minnesota. As a coding framework I used Kaggle, since it comes with the convenience of notebooks that have the basic data science modules installed and are ready to go with two clicks. The complete analysis and the Pyspark code you can also find in this Kaggle notebook and the Pandas code in this one. We won’t replicate the same analysis here, but instead focus on the syntax differences when handling Pandas and Pyspark dataframes. I will always show the Pandas code first following with the PySpark equivalent. The basic functions that we need for this analysis are: Loading data from csv format Combining datasets from different tables Extracting information</summary></entry><entry><title type="html">An Ice Cube about Getting started</title><link href="http://localhost:4000/posts/inspiration/mindset/2021/03/01/just-a-wholeday.html" rel="alternate" type="text/html" title="An Ice Cube about Getting started" /><published>2021-03-01T09:03:30+01:00</published><updated>2021-03-01T09:03:30+01:00</updated><id>http://localhost:4000/posts/inspiration/mindset/2021/03/01/just-a-wholeday</id><content type="html" xml:base="http://localhost:4000/posts/inspiration/mindset/2021/03/01/just-a-wholeday.html">&lt;h2&gt;If I just had a whole day . . . &lt;/h2&gt;
&lt;p&gt;
How often were you thinking about trying out a new hobby or picking up an old one, but it seems like there is never really enough time to actually do it?
&lt;/p&gt;
&lt;p&gt;
    I love trying out new crafts and sports mostly just out of curiosity. In that way I got into all kinds of stuff sewing, knitting, piano &amp; guitar playing, sailing, photography, rugby, pen-plotting, contributing to a local meet-up group and even blogging.
    I don't want to brag here, I am not good at any of those in particular. What I want to achieve is to learn the basic concepts and to pursue those further that I find exciting.
&lt;/p&gt;
&lt;p&gt;
    Sometimes when I shared my joy about exploring new things I got a frustrating response from colleagues, friends or family members: &quot;I would like try that too, but I need to get a whole day to really get into it. Otherwise, it's not worth it.&quot;
&lt;/p&gt;
&lt;p&gt;
    This statement always made me sad, because with that view on life there will never be that time or at least not anytime soon. There is life happening around us and most of us just don't have the luxury of empty weekends or taking a day off.
&lt;/p&gt;
&lt;p&gt;
    So will that mean, that there is never time to do what you actually want to try out?
&lt;/p&gt;
&lt;p&gt;
    For me life is all about trying out new things and that's why I want to share with you three simple tips that work for me to get started.
&lt;/p&gt;
&lt;p&gt;
    Disclaimer here, this is post is not about starting a new hobbies and mastering them. For more information about that I kindly refer you to Angela Duckworth's
    &lt;a href=&quot;https://www.ted.com/talks/angela_lee_duckworth_grit_the_power_of_passion_and_perseverance?nolanguage=en%EF%BB%BF&quot; target=&quot;_blank&quot;&gt;
    TED Talk&lt;/a&gt; or her
    &lt;a href=&quot;https://www.econtalk.org/angela-duckworth-on-grit/&quot; target=&quot;_blank&quot;&gt;
    conversation on EconTalks&lt;/a&gt; with Ross Roberts. She found out that there is a relation of talent, effort and skill.
    With an initial talent we need less effort to learn a certain skill, but if we put a lot of effort into learning,
    talent can be outperformed. The motivation to go the extra mile and put effort into improvement she describes as grit,
    the combination of passion and perseverance, the will to push forward to become better.
&lt;/p&gt;
In this blog post we don't want to get better, we want to get started. That means it's all about lowering the threshold
and jump over the hurdles in own head that state reasons why we cannot do it.
&lt;/p&gt;
&lt;h5&gt;My three tips that I encourage you to try out are:&lt;/h5&gt;
&lt;ul&gt;
    &lt;li&gt;Allocate smaller chunks of time, instead of one big chunk.&lt;/li&gt;
    &lt;li&gt;Set a small realistic goal.&lt;/li&gt;
    &lt;li&gt;Define a reward.
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Allocate smaller chunks of time, instead of one big chunk.&lt;/h4&gt;

&lt;p&gt;
Learning is hard and learning under pressure is seldom resulting in a sustainable learning experience. Deadlines can be
    an external motivation to push yourself forward but with overloading you brain's capacity concepts won't stick.
&lt;/p&gt;
&lt;p&gt;
    Of course you can spend all this time on the one skill that you want to learn. How do you think this day will look like? And how do you think you would feel after that day?
&lt;/p&gt;
&lt;p&gt;
    Learning is a time and energy consuming process. It doesn't happen instantly and the body doesn't always appreciate novelty. To make motivation sustainable one way is to split sessions up into smaller bit and finish them before they feel draining.
&lt;/p&gt;
&lt;p&gt;
    Frustration and anger are good indicators that it's time for a break.
&lt;/p&gt;
&lt;p&gt;
    Personally I found my sweet spot to trick my brain in to workout or activities with intense focus between 15–20min. If I feel like going on longer, great! If not, I started and let the brain digest.
&lt;/p&gt;
&lt;h4&gt;Set a small realistic goal or several milestones&lt;/h4&gt;
&lt;p&gt;
What is it that you want to be able to do or what is it that you want to achieve? Since you are starting learning a skill, goals should be small.
    If you start to learn football with the objective to become league player I admire your ambitions. However, do you know that you actually like running after a ball yet?
&lt;/p&gt;
&lt;p&gt;
    Small realistic goals in this case could be: I want to be able to kick the ball 5m in a certain direction. I want to be able to run 20m dribbling the ball.
&lt;/p&gt;
&lt;p&gt;
    The number of goals are not limited, you can set them and check them off. The goal shouldn't be impressive, it should be foremost motivating. Reaching this goal should leave you with a feeling of accomplishment.
&lt;/p&gt;
&lt;h4&gt;    Reward yourself&lt;/h4&gt;
&lt;p&gt;
Learning is the reward! No, just kidding. In the short run, the view is narrow, so think about what you want to do,
    if you spend a certain amount of time or energy on the skill that you want to learn. In the long run, learning is for sure the reward. You added a new tool into your toolbox and also learned how to learn.
&lt;/p&gt;
&lt;p&gt;
    How you choose the reward is up to you. Take a walk, watch a series, play some games, depending on what you find rewarding. I personally like candy.
&lt;/p&gt;
&lt;p&gt;
    You might have seen that the tips that I shared with you have a common theme. Start the first session with a low
    time and energy threshold and finish with a nice experience. With that positive memory it will be easier to
    start the next session another day. Once a routine is established we can talk about grit, challenges and pushing forward to develop skills further.
&lt;/p&gt;
&lt;p&gt;
    I hope you feel encouraged to try out a new skill or activity that you always wanted to try out.
&lt;/p&gt;
&lt;p&gt;
    Let me know how it goes! And please share your tips that you found valuable for learning.
&lt;/p&gt;

&lt;p&gt;
    All the best,
    &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">If I just had a whole day . . . How often were you thinking about trying out a new hobby or picking up an old one, but it seems like there is never really enough time to actually do it? I love trying out new crafts and sports mostly just out of curiosity. In that way I got into all kinds of stuff sewing, knitting, piano &amp; guitar playing, sailing, photography, rugby, pen-plotting, contributing to a local meet-up group and even blogging. I don't want to brag here, I am not good at any of those in particular. What I want to achieve is to learn the basic concepts and to pursue those further that I find exciting. Sometimes when I shared my joy about exploring new things I got a frustrating response from colleagues, friends or family members: &quot;I would like try that too, but I need to get a whole day to really get into it. Otherwise, it's not worth it.&quot; This statement always made me sad, because with that view on life there will never be that time or at least not anytime soon. There is life happening around us and most of us just don't have the luxury of empty weekends or taking a day off. So will that mean, that there is never time to do what you actually want to try out? For me life is all about trying out new things and that's why I want to share with you three simple tips that work for me to get started. Disclaimer here, this is post is not about starting a new hobbies and mastering them. For more information about that I kindly refer you to Angela Duckworth's TED Talk or her conversation on EconTalks with Ross Roberts. She found out that there is a relation of talent, effort and skill. With an initial talent we need less effort to learn a certain skill, but if we put a lot of effort into learning, talent can be outperformed. The motivation to go the extra mile and put effort into improvement she describes as grit, the combination of passion and perseverance, the will to push forward to become better. In this blog post we don't want to get better, we want to get started. That means it's all about lowering the threshold and jump over the hurdles in own head that state reasons why we cannot do it. My three tips that I encourage you to try out are: Allocate smaller chunks of time, instead of one big chunk. Set a small realistic goal. Define a reward. Allocate smaller chunks of time, instead of one big chunk.</summary></entry><entry><title type="html">An Ice Cube about Resources to Learn Python</title><link href="http://localhost:4000/python/learning/2021/01/27/learning-python-programming.html" rel="alternate" type="text/html" title="An Ice Cube about Resources to Learn Python" /><published>2021-01-27T09:03:30+01:00</published><updated>2021-01-27T09:03:30+01:00</updated><id>http://localhost:4000/python/learning/2021/01/27/learning-python-programming</id><content type="html" xml:base="http://localhost:4000/python/learning/2021/01/27/learning-python-programming.html">&lt;h2&gt;Where to start when learning programming with Python&lt;/h2&gt;
&lt;p&gt;
    As usual, when starting looking for information when learning a new skill or about a new topic, it's difficult to
    find relevant resources.
&lt;/p&gt;
&lt;p&gt;
    Especially technical topics can feel intimidating to even start in the first place.
&lt;/p&gt;
&lt;p&gt;
    Python wasn't the first programming language I learned, but it is by far my favorite. Python is volatile language
    that can be used in many different topics you can dive into after understanding the basics, like math &amp; statistics
    with Python, data processing, machine learning, web-programming and embedded programming. But before that, one has
    to get started.
&lt;/p&gt;
&lt;p&gt;
    As a Python ambassador I often get questions about where to find useful resources. In this post I won't explain
    the details of Python, but rather want to point to resources that I found helpful to get started. Also this is a
    living list, meaning that I keep the freedom to update and extend it from time to time.
&lt;/p&gt;

&lt;h4&gt;Getting started&lt;/h4&gt;
&lt;p&gt;
    If you never have written a line of code and approach Python as your first programming language, then you can have
    a look at the following links. Please don't go through all of the tutorials and books. Choose one or two of them
    depending on the format that you learn from best:
&lt;/p&gt;

&lt;h4&gt;Web pages:&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://www.learnpython.org/&quot; target=&quot;_blank&quot;&gt;https://www.learnpython.org/&lt;/a&gt; &lt;br&gt;
        An interactive web page, were you can get a grasp of the language and structure without any need to set something up.
        It's great to just get started without struggling to find the right tools or installation files.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://www.w3schools.com/python/python_intro.asp&quot; target=&quot;_blank&quot;&gt;
            https://www.w3schools.com/python/python_intro.asp&lt;/a&gt; &lt;br&gt;
        A more general introduction to the language, you can check out on W3School, which is the go to side of web
        programming basics.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Books (online):&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://www.py4e.com/&quot; target=&quot;_blank&quot;&gt;https://www.py4e.com/&lt;/a&gt; &lt;br&gt;
        All material for the book &quot;Python for Everybody&quot; by Dr. Charles R. Severance, with also a PDF version
        available linked from that page &lt;br&gt;
        &lt;a href=&quot;http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf&quot; target=&quot;_blank&quot;&gt;
            http://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf&lt;/a&gt; &lt;br&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://greenteapress.com/wp/think-python-2e/&quot; target=&quot;_blank&quot;&gt;
            https://greenteapress.com/wp/think-python-2e/&lt;/a&gt; &lt;br&gt;
        &quot;Think Python&quot; by Allen B. Downey introducing programming and Python for beginners.
    &lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Courses &amp; Tutorials:&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://realpython.com/python-first-steps/&quot; target=&quot;_blank&quot;&gt;https://realpython.com/python-first-steps/ &lt;/a&gt; &lt;br&gt;
        A lot of free tutorials and information available without a paid membership.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://www.coursera.org/learn/python?specialization=python&quot; target=&quot;_blank&quot;&gt;
            https://www.coursera.org/learn/python?specialization=python&lt;/a&gt; &lt;br&gt;
        Respective course from the author &quot;Python for Everybody&quot; by Dr. Charles R. Severance on Coursera.
        Choosing the certificate option might require payment.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    After writing some lines of code or maybe just a single one you will run into problems and that is a crucial
    part of the learning process. Embrace your errors as a learning opportunity.
&lt;/p&gt;

&lt;h4&gt;Troubleshooting:&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://www.stackoverflow.com&quot; target=&quot;_blank&quot;&gt;www.stackoverflow.com&lt;/a&gt; &lt;br&gt;
        Maybe the largest forum for developers, where people share and discuss their code, architecture,
        error messages, careers and more
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://www.fullstackpython.com/debugging.html&quot; target=&quot;_blank&quot;&gt;
            https://www.fullstackpython.com/debugging.html
        &lt;/a&gt; &lt;br&gt;
        Learn how to debug and understand the tools
    &lt;/li&gt;
    &lt;li&gt;
        Local Python communities like
        &lt;a href=&quot;https://www.python.org/events/python-user-group/&quot; target=&quot;_blank&quot;&gt;https://www.python.org/events/python-user-group/&lt;/a&gt; &lt;br&gt;
        and
        &lt;a href=&quot;https://pyladies.com/locations/&quot; target=&quot;_blank&quot;&gt;https://pyladies.com/locations/&lt;/a&gt; &lt;br&gt;
         to meet your peers, share and discuss
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    Very few programmers are writing code with only an editor and command line. If you want to use a proper
    IDE (integrated development environment) or avoid installing Python on your computer locally, have a look at
    the following links. Again choose one and try it out for a bit, don't fall in the trap to get obsessed with tools.
&lt;/p&gt;

&lt;h4&gt;Writing code:&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot; target=&quot;_blank&quot;&gt;https://www.jetbrains.com/pycharm/download/&lt;/a&gt; &lt;br&gt;
        &lt;a href=&quot;https://visualstudio.microsoft.com/vs/community/&quot; target=&quot;_blank&quot;&gt;https://visualstudio.microsoft.com/vs/community/&lt;/a&gt; &lt;br&gt;
        Most popular editors for Python PyCharm and Visual Studio
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://colab.research.google.com/notebooks/intro.ipynb&quot; target=&quot;_blank&quot;&gt;https://colab.research.google.com/notebooks/intro.ipynb&lt;/a&gt; &lt;br&gt;
        With a google account you can code in the cloud without the need to install Python locally
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href=&quot;https://mybinder.org/&quot; target=&quot;_blank&quot;&gt;https://mybinder.org/&lt;/a&gt; &lt;br&gt;
        Interactive code with Jupyter notebooks in the browser (needs pre-existing code in form of a Github repository)
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
    I really hope you found a starting point for your learning journey and enjoy exploring the world of Python and programming in general.
&lt;/p&gt;
&lt;p&gt;
    Happy learning and let me know how it goes!
&lt;/p&gt;
&lt;p&gt;
    All the best,
    &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">Where to start when learning programming with Python As usual, when starting looking for information when learning a new skill or about a new topic, it's difficult to find relevant resources. Especially technical topics can feel intimidating to even start in the first place. Python wasn't the first programming language I learned, but it is by far my favorite. Python is volatile language that can be used in many different topics you can dive into after understanding the basics, like math &amp; statistics with Python, data processing, machine learning, web-programming and embedded programming. But before that, one has to get started. As a Python ambassador I often get questions about where to find useful resources. In this post I won't explain the details of Python, but rather want to point to resources that I found helpful to get started. Also this is a living list, meaning that I keep the freedom to update and extend it from time to time.</summary></entry><entry><title type="html">An Ice Cube about The Culture Code and Software Teams</title><link href="http://localhost:4000/posts/inspiration/books/2021/01/05/book-review-culture-code.html" rel="alternate" type="text/html" title="An Ice Cube about The Culture Code and Software Teams" /><published>2021-01-05T09:03:30+01:00</published><updated>2021-01-05T09:03:30+01:00</updated><id>http://localhost:4000/posts/inspiration/books/2021/01/05/book-review-culture-code</id><content type="html" xml:base="http://localhost:4000/posts/inspiration/books/2021/01/05/book-review-culture-code.html">&lt;h2&gt;Book Review The Culture Code from Daniel Coyle and Reflection for Software Teams&lt;/h2&gt;
&lt;p&gt;
    My goal for the last years have been to read at least one book per month. During my free time occupations I picked
    up more and more responsibility so that I felt the need to learn more about group dynamics and leadership. In the
    bookshelf of one company that I visited for a meetup I found
    &lt;a href=&quot;http://danielcoyle.com/the-culture-code/&quot; target=&quot;_blank&quot;&gt; &quot;The Culture Code - Secrets of highly successful
        Groups&quot;&lt;/a&gt; and got curious. Even for me who doesn't have a formal leadership position it was an interesting
    read and I can recommend it to you understand and shape the culture in your team.
&lt;/p&gt;
&lt;h4&gt;The book in short&lt;/h4&gt;
&lt;p&gt;
    In &quot;The Culture Code&quot; studies Daniel Coyle the culture of high performing teams like the film creators from
    Pixar, the US Navi SEALs and sports teams like the New Zealand rugby team All Blacks to name a few.
    In three parts Daniel Coyle reflects on how to shape successful team cultures.
    &lt;br&gt;
    Those parts are: Building safety,
    sharing vulnerability and establishing purpose.
    &lt;br&gt;
    Building safety means in short to establish an environment where everybody on the team feels save to take risks,
    make mistakes and speak up. This goes hand in hand with sharing vulnerability. This part states an end of the macho
    culture instead of pretending to know everything successful leader name their weaknesses, ask for support and in
    that way motivate their team members to do so as well. In the last part of the book Daniel Coyle goes deeper into
    establishing purpose, a common reason to strengthen the sense of belonging and importance of the common mission.
&lt;/p&gt;
&lt;p&gt;
    In each part Coyle explains underlying research and observations of different teams with positive and negative
    examples which make the book more tangible to read by seeing the concepts in real life.
    &lt;br&gt;
    Each part is wrapped up with the chapter &quot;Ideas for action&quot; that leaders should consider in the culture establishing
    process.
    I don't want to go into too much detail and list all ideas for action and instead highlight high level actions that
    stick out:
    &lt;b&gt;
&lt;ul&gt;
    &lt;li&gt; Practice active listening&lt;/li&gt;
    &lt;li&gt; Giving feedback &amp; appreciation&lt;/li&gt;
    &lt;li&gt; Importance of vulnerability&lt;/li&gt;
    &lt;li&gt; Common vision and purpose&lt;/li&gt;
    &lt;li&gt; Giving belonging Cues &amp; Using Catch phrases&lt;/li&gt;
&lt;/ul&gt;
&lt;/b&gt;
&lt;/p&gt;

&lt;h4&gt;The Culture code in Software teams&lt;/h4&gt;
&lt;p&gt;
    When I was reading through the chapters and learned about examples of successful groups I was wondering how those
    can be applied in the kind of teams I am working in. I am working with software development for products with data
    processing and analysis under the hood. In my team we are cross-functional in the way that we have data scientists,
    data analysis and software developers with different skills who collaborate and cooperate to build a common product.
    We structure our work using the agile approach of Scrum and the corresponding ceremonies. If you are curious about
    this, you can have a look on
    &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrum_(software_development)&quot; target=&quot;_blank&quot;&gt;
        Wikipedia&lt;/a&gt; and the
    &lt;a href=&quot;https://microsoft.github.io/code-with-engineering-playbook/agile-development/&quot; target=&quot;_blank&quot;&gt;
        code-with-engineering-playbook&lt;/a&gt;
    from Microsoft.
&lt;/p&gt;

&lt;h5&gt;Practice active listening&lt;/h5&gt;
&lt;p&gt;
    Since a lot of communication in companies is done in meetings, not only talking and expressing is important but also
    listening and understanding the others.
    &lt;br&gt;
    In my team we meet every morning and explain what we did the day before, what we plan to do today and if we need
    help. It
    is not only a way to understand what everybody is doing, but also to ensure that everybody is heard and concerns are
    raises.
    &lt;br&gt;
    However practicing active listening becomes even more important for leaders, like product owners that need to
    understand the team's concerns and stakeholder's needs and find a way to ensure information flow and initiating
    further discussions.
    &lt;br&gt;
    Active listening should also be part of the job descriptions for bosses and managers on any level to understand
    employee needs.
&lt;/p&gt;

&lt;h5&gt;Giving Feedback and Appreciation&lt;/h5&gt;
&lt;p&gt;
    One interesting point that Coyle mentioned in his book us that the amount of thank-you's is much higher in
    successful groups. How often do you hear appreciation during one day?
    &lt;br&gt;
    For giving feedback there is a dedicated ceremony in the scrum format, the retrospective, where the team reflects
    about what worked well, what didn't work and what can be improved.
    &lt;br&gt;
    Here again active listening is a necessary point, but also appreciation
    in stating what worked well and honesty to point out what didn't work.
    For many teams are retrospectives the only formal feedback session and learning opportunity as a team.
    Unfortunately I saw quite often that this session gets strike out quickly or postponed over and over again when there
    are many meetings in the calendar. Maybe because not every team member sees the value in retrospective, which is a clear
    communication problem or it triggers discomfort thinking about pain points, which should also raise a flag
    and the discussion about trust within the team. We will discuss that in the following section.
&lt;/p&gt;

&lt;h5&gt;Importance of Vulnerability&lt;/h5&gt;
&lt;p&gt;
    For working in a team in general vulnerability is an significant factor. We all have different skills and knowledge
    that we need to combine to build bigger products. That basically means that not everybody can know everything. Being
    open enough to state that there is a knowledge gap needs trust as a foundation. If there is no trust within the team
    than there is no courage to be vulnerable.
    Would you share that you lack of knowledge in a meeting? If yes, congrats! You are most likely surrounded with
    people that you trust. If not, what could you do to increase trust in your team? What is it that is lacking to feel
    safe?
&lt;/p&gt;

&lt;h5&gt;Common Vision and Purpose&lt;/h5&gt;
&lt;p&gt;
    The agile way of working that I have seen is by structuring work in iterations which have different names depending
    who you
    ask. The most common time intervals I have seen are 12+ weeks for long term, 6 - 8 weeks for mid-term and 1 - 3
    weeks for short term planning. The team decides in dedicated planning session what to do to meet stake holders
    needs. Key factor for success is that the team and stakeholders share the same vision and the team understands the
    purpose.
    Beside the team planning sessions there are usually formats to communicate vision and purpose on department or
    company level as well.
&lt;/p&gt;

&lt;h5&gt;Belonging Cues &amp; Catch phrases&lt;/h5&gt;
&lt;p&gt;
    Understanding the team's vision and purpose is just one part of the equation to success. Another crucial part is
    also to
    ensure that people feel as members with a direct contribution.
    Leaders and team members need to ensure that they communicate belonging clues as Coyle calls them. The bottom
    message of
    those belonging cues are: We are safe, we are connected, we share a common future. Again part of belonging is about
    building trust. Did you ever get fired, your department restructured or your company acquired? If that was the case
    you might understand now why your motivation went down. Your trust contract was broken, there was no or an unclear
    common future and your belonging to the company was questioned or just disappeared.
&lt;/p&gt;
&lt;p&gt;
    That is the extreme end of how to not build successful teams. So let's go on to catch phrases. Do you know a catch
    phrase of the team you are working with?
    Two catch phrases from Pixar you will find in the book are:
&lt;ul&gt;
    &lt;li&gt;Hire people smarter than you.&lt;/li&gt;
    &lt;li&gt;Fail early, fail often.&lt;/li&gt;
&lt;/ul&gt;
    If you think about those catchphrases they sound a bit cliché but they embed the points we were talking about in
    this post: trust and vulnerability.
    My very first bosses said once, &quot;You get the employees that you deserve&quot;. It is a catch phrase for sure, still he
    very clearly expressed early after I joined the company that he trust me and my colleagues to make our relationship
    is a mutual contribution.
&lt;/p&gt;

&lt;p&gt;
    Now that you know a bit more about team culture, what culture did you experience? How did you contribute? Feel
    free to reach out by &lt;a href=&quot;mailto:christinewinter1@gmx.de? subject=Hello%Icecubes&quot;&gt;e-mail&lt;/a&gt;, I am
    curious to hear your thoughts and story! &lt;/p&gt;
&lt;p&gt;
    All the best,
    &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">Book Review The Culture Code from Daniel Coyle and Reflection for Software Teams My goal for the last years have been to read at least one book per month. During my free time occupations I picked up more and more responsibility so that I felt the need to learn more about group dynamics and leadership. In the bookshelf of one company that I visited for a meetup I found &quot;The Culture Code - Secrets of highly successful Groups&quot; and got curious. Even for me who doesn't have a formal leadership position it was an interesting read and I can recommend it to you understand and shape the culture in your team. The book in short In &quot;The Culture Code&quot; studies Daniel Coyle the culture of high performing teams like the film creators from Pixar, the US Navi SEALs and sports teams like the New Zealand rugby team All Blacks to name a few. In three parts Daniel Coyle reflects on how to shape successful team cultures. Those parts are: Building safety, sharing vulnerability and establishing purpose. Building safety means in short to establish an environment where everybody on the team feels save to take risks, make mistakes and speak up. This goes hand in hand with sharing vulnerability. This part states an end of the macho culture instead of pretending to know everything successful leader name their weaknesses, ask for support and in that way motivate their team members to do so as well. In the last part of the book Daniel Coyle goes deeper into establishing purpose, a common reason to strengthen the sense of belonging and importance of the common mission. In each part Coyle explains underlying research and observations of different teams with positive and negative examples which make the book more tangible to read by seeing the concepts in real life. Each part is wrapped up with the chapter &quot;Ideas for action&quot; that leaders should consider in the culture establishing process. I don't want to go into too much detail and list all ideas for action and instead highlight high level actions that stick out: Practice active listening Giving feedback &amp; appreciation Importance of vulnerability Common vision and purpose Giving belonging Cues &amp; Using Catch phrases</summary></entry><entry><title type="html">An Ice Cube about Arranging Tech-Events</title><link href="http://localhost:4000/posts/inspiration/events/2020/11/22/community-events.html" rel="alternate" type="text/html" title="An Ice Cube about Arranging Tech-Events" /><published>2020-11-22T19:00:00+01:00</published><updated>2020-11-22T19:00:00+01:00</updated><id>http://localhost:4000/posts/inspiration/events/2020/11/22/community-events</id><content type="html" xml:base="http://localhost:4000/posts/inspiration/events/2020/11/22/community-events.html">&lt;h2&gt;Shaping the Community&lt;/h2&gt;
&lt;p&gt;
    In a previous post I told you my story about becoming a PyLady, first as a speaker and later as an event
    organiser of PyLadies Stockholm and PyCon Sweden. This time I want to share my motivation that gives
    me the energy to arrange such kind of community events and why I encourage you to try out as well.
&lt;/p&gt;

&lt;h4&gt;Meeting People&lt;/h4&gt;
&lt;p&gt;
	This is by far the most obvious point of motivation. The main reason I like organizing events is the fact of meeting
    new people. That doesn't mean that I go to everyone who joins and bother with a conversation. Being the organizer
    allows me to get in contact with speakers, other members from the organizer team and volunteers. Since I was
    struggling in the beginning to find my sense of belonging in the tech community, knowing a bunch of people helped
    me definitely to feel more at home.
    &lt;br&gt;
	There are times when I am unsure about where I want to go in my career, then I take the chance and ask people
    directly what tasks and responsibilities they have in their roles. Do you know what it means to be a data
    scientist, software engineer, UX designer or the CTO of a new startup?
	I am so thankful about those precious insights.
&lt;/p&gt;

&lt;h4&gt;Level up on Leadership&lt;/h4&gt;
&lt;p&gt;
    Arranging events needs some form of leadership. For most events with PyLadies Sthlm I had to keep a couple
    of people in the loop beforehand. Starting with the organizer team, to speakers who provide the content and
    sponsors hosting us. That means I have to formulate a vision of the event, answering questions and taking
    decision by myself. Just because I have arranged a couple of events before it is not obvious
    to everybody what the procedure is. Over time I became a better communicator by explaining and listening to ideas from
    others.
&lt;/p&gt;

&lt;h4&gt;Level up on Tech Knowledge &lt;/h4&gt;
&lt;p&gt;
    By attending tech events I always learn something new. Either a new concept, or if I have already some knowledge
    about the topic I understand more details or simply see a different approach of explaining.
    Hearing the content being presented by a person in real time is way more engaging and goes beyond the frontal approach of
    online courses and documentation web sites. Mainly because there is somebody that can answer questions directly.
    I always leave events inspired and with 100 ideas of possible projects and feel also like I see where tech
    trends might go and which skills might be good to develop next.
&lt;/p&gt;

&lt;h4&gt;Trying things out&lt;/h4&gt;
&lt;p&gt;
    Events go beyond the meetup platform. Most groups have a web site or social media presence.
	Public relations and communication is nothing I studies formally. However I can try it out by writing meetup
    description, do some web programming or video streaming and get better over time and learn the tools and new ways.
&lt;/p&gt;

&lt;h4&gt;Growth &amp; Appreciation&lt;/h4&gt;
&lt;p&gt;
    For me it's a big reward seeing people grow. Especially the ones that haven't done such kind of talk or
    workshop before and dare to take up that challenge. I know that speaking in public is terrifying for most
    people and I want to give as much as support needed so that speakers feel comfortable with the situation
    knowing there is one alley in the audience. For me that means that I am available for a dry runs of the
    presentation, prepare some questions to initiate the discussion and give some feedback if wanted.
    &lt;br&gt;
    Standing in front of the crowd that has high expectations about the event and moderate and initiate discussion
    gave me a push to grow as a person. I have to take ownership and responsibility for everything that goes well and
    also the parts that go wrong.
    &lt;br&gt;
	Usually people appreciate having a place to meet their peers and learn more about the subject they are interested
    in. Getting this appreciation and seeing how other people find each other makes me happy since I feel like I am to
    some part the one enabling this experience.
&lt;/p&gt;
&lt;p&gt;
    In the end my goal is to build a community where people feel like they belong here, where they feel safe
    and get brave to try out. With every coming meetup we get a bit closer to that goal.
&lt;/p&gt;
&lt;p&gt;
    Which event would you like to see happening? And what stops you in trying out to arrange yourself?
    &lt;br&gt;
    I am sure it will be a great experience!
&lt;/p&gt;
&lt;p&gt;
    All the best, &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">Shaping the Community In a previous post I told you my story about becoming a PyLady, first as a speaker and later as an event organiser of PyLadies Stockholm and PyCon Sweden. This time I want to share my motivation that gives me the energy to arrange such kind of community events and why I encourage you to try out as well.</summary></entry><entry><title type="html">An Ice Cube about how PyCon Sweden went online</title><link href="http://localhost:4000/posts/inspiration/pyconse/2020/11/15/organize-conference.html" rel="alternate" type="text/html" title="An Ice Cube about how PyCon Sweden went online" /><published>2020-11-15T14:00:00+01:00</published><updated>2020-11-15T14:00:00+01:00</updated><id>http://localhost:4000/posts/inspiration/pyconse/2020/11/15/organize-conference</id><content type="html" xml:base="http://localhost:4000/posts/inspiration/pyconse/2020/11/15/organize-conference.html">&lt;h2&gt;Conferences in Times of Corona&lt;/h2&gt;
&lt;p&gt;
    The disruption in the event industry this year did also hit our organizing team at &lt;a href=&quot;www.pycon.se&quot; target=&quot;_blank&quot;&gt;PyCon Sweden 2020&lt;/a&gt; .
    Last year we arranged our biggest conference until then. A two day conference with 3 keynotes, 17 talks,
    4 workshops and 2 panel discussions at a venue in the heart of Stockholm. For 2020 we had similar plans
    and then in March everything changed. Since the conference is usually planned for the fall, we had some
    buffer to decide if we even want to consider an on-site conference. We quickly decided against it and to
    go fully online instead. This didn't reduce the planning and we had new points to consider opening our registration
    up to the world.&lt;br&gt;
    With a lot of energy and will we extended
    &lt;a href=&quot;www.pycon.se&quot; target=&quot;_blank&quot;&gt;PyCon Sweden 2020&lt;/a&gt; and arranged a 2 day conference with multiple tracks,
    4 keynotes, 35 talks, 4 workshops and 2 panel discussions!
&lt;/p&gt;
&lt;p&gt;
    Here is a checklist of things we had to do to arrange a conference of this format.
    One can invest more time in many of those points, like extended marketing, a remarkable state of the art webpage,
    intense participant &amp; sponsor engagement and high entertainment in general.&lt;br&gt;
    This checklist is not fully complete. Still it should allow you to arrange a conference with the main points covered.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt; 4 - 5 months before the conference:&lt;/b&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;team&quot;&gt;
    &lt;label for=&quot;team&quot;&gt; Gather the team and set up regular meetings&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;notes&quot;&gt;
    &lt;label for=&quot;notes&quot;&gt; Take notes during meetings, for example like
        &lt;a href=&quot;https://github.com/python-sverige/protokoll/blob/master/styrelsemote/boardmeeting-YYYY-MM-DD-template.md&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; &lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;date&quot;&gt;
    &lt;label for=&quot;date&quot;&gt; Decide a date&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;size&quot;
    &lt;label for=&quot;size&quot;&gt; Decide on the size (multiple tracks, 2 days)&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;platform&quot;&gt;
    &lt;label for=&quot;platform&quot;&gt; Test and decide on a streaming platform&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;keynotes&quot;&gt;
    &lt;label for=&quot;keynotes&quot;&gt; Invite Keynote speakers&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;webpage&quot;&gt;
    &lt;label for=&quot;webpage&quot;&gt; Setup a web page&lt;/label&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt; 2 - 3 months before the conference:&lt;/b&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;cfpopen&quot;&gt;
    &lt;label for=&quot;cfpopen&quot;&gt; Open call for proposals&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;social&quot;&gt;
    &lt;label for=&quot;social&quot;&gt; Social media coverage, email ads&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;publish&quot;&gt;
    &lt;label for=&quot;publish&quot;&gt; Publish on social media reminders&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;sponsors&quot;&gt;
    &lt;label for=&quot;sponsors&quot;&gt; Contact sponsors, sync expectations&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;keynote-announce&quot;&gt;
    &lt;label for=&quot;keynote-announce&quot;&gt; Keynote announcement&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;cfpclose&quot;&gt;
    &lt;label for=&quot;cfpclose&quot;&gt; Close CFP and decide on talks/workshops&lt;/label&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt; 1 month before the conference:&lt;/b&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;team2&quot;&gt;
    &lt;label for=&quot;team2&quot;&gt; Increase meeting frequency&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;registrationopen&quot;&gt;
    &lt;label for=&quot;registrationopen&quot;&gt; Open registration&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;schedule&quot;&gt;
    &lt;label for=&quot;schedule&quot;&gt; Create schedule &amp; sync with speakers&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;talksetup&quot;&gt;
    &lt;label for=&quot;talksetup&quot;&gt; Set up broadcasts, background, links&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;webschedule&quot;&gt;
    &lt;label for=&quot;webschedule&quot;&gt; Publish schedule&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;engage&quot;&gt;
    &lt;label for=&quot;engage&quot;&gt; Set up participant engagement (give away, Slack)&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;publish4&quot;&gt;
    &lt;label for=&quot;publish4&quot;&gt; Publish on social media reminders&lt;/label&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt; 2 weeks before the conference:&lt;/b&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;onboarding&quot;&gt;
    &lt;label for=&quot;onboarding&quot;&gt; Volunteer On-boarding&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;calendar&quot;&gt;
    &lt;label for=&quot;calendar&quot;&gt; Calendar reminders during conference in Slack&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;rehearsals&quot;&gt;
    &lt;label for=&quot;rehearsals&quot;&gt; Speakers Rehearsals&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;publish2&quot;&gt;
    &lt;label for=&quot;publish2&quot;&gt; Publish on social media reminders&lt;/label&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt; 1 week before the conference:&lt;/b&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;moderation&quot;&gt;
    &lt;label for=&quot;moderation&quot;&gt; Prepare opening, closing and moderation&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;registrationclose&quot;&gt;
    &lt;label for=&quot;registrationclose&quot;&gt; Close Registration&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;prepare&quot;&gt;
    &lt;label for=&quot;prepare&quot;&gt; Prepare social media coverage during the conference&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;publish3&quot;&gt;
    &lt;label for=&quot;publish3&quot;&gt; Publish on social media reminders&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;feedbackprepare&quot;&gt;
    &lt;label for=&quot;feedbackprepare&quot;&gt; Design and prepare preliminary feedback form&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;communication&quot;&gt;
    &lt;label for=&quot;communication&quot;&gt; Clarify team communication and responsibilities&lt;/label&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt; Conference day:&lt;/b&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;golive&quot;&gt;
    &lt;label for=&quot;golive&quot;&gt; Go live&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;havefun&quot;&gt;
    &lt;label for=&quot;havefun&quot;&gt; Have fun&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;slack&quot;&gt;
    &lt;label for=&quot;slack&quot;&gt; Create conversation/initiate engagement on Slack etc.&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;feedbackask&quot;&gt;
    &lt;label for=&quot;feedbackask&quot;&gt; Ask for feedback&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;debrief&quot;&gt;
    &lt;label for=&quot;debrief&quot;&gt; Debrief and celebrate&lt;/label&gt;&lt;br&gt;

&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt; 1 week after the conference:&lt;/b&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;feedback&quot;&gt;
    &lt;label for=&quot;feedback&quot;&gt; Analyse feedback&lt;/label&gt;&lt;br&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;retrospect&quot;&gt;
    &lt;label for=&quot;retrospect&quot;&gt; Retrospect and lessons learned&lt;/label&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;
    Of course there are many more things that one could do during preparation time or the conference.
    And if there is not a lack of anything it is ideas.
    However keep in mind, that the time and energy you can spend on an event like this is
    highly dependent on the amount and availability of voluntarily work.&lt;br&gt;
    Since we want to keep our heads cool during the conference itself it is wise to prioritise and strike certain
    points out in order to give others enough attention. If things go terribly wrong and we are already at maximum
    capacity it could mean a total meltdown for some of us and would destroy our team dynamic drastically.
    &lt;br&gt;
    At PyCon Sweden we were incredibly lucky that we found committed volunteers that took full ownership to ensure a
    great experience both for the speakers and the audience. And I am thankful for each single contribution!
    &lt;br&gt;
    There are always some hick-ups here and there, especially with technic involved it usually doesn't get easier.
    A muted microphone, multiple posts with the same content, loss of connection up to a surrendering computer.&lt;br&gt;
    But honestly isn't exactly that the delightful and exciting part of a live conference?
&lt;/p&gt;
&lt;p&gt;
    I hope you found the checklist usable and wish you good luck for your online event or conference!
&lt;/p&gt;
&lt;p&gt;
    All the best, &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">Conferences in Times of Corona The disruption in the event industry this year did also hit our organizing team at PyCon Sweden 2020 . Last year we arranged our biggest conference until then. A two day conference with 3 keynotes, 17 talks, 4 workshops and 2 panel discussions at a venue in the heart of Stockholm. For 2020 we had similar plans and then in March everything changed. Since the conference is usually planned for the fall, we had some buffer to decide if we even want to consider an on-site conference. We quickly decided against it and to go fully online instead. This didn't reduce the planning and we had new points to consider opening our registration up to the world. With a lot of energy and will we extended PyCon Sweden 2020 and arranged a 2 day conference with multiple tracks, 4 keynotes, 35 talks, 4 workshops and 2 panel discussions! Here is a checklist of things we had to do to arrange a conference of this format. One can invest more time in many of those points, like extended marketing, a remarkable state of the art webpage, intense participant &amp; sponsor engagement and high entertainment in general. This checklist is not fully complete. Still it should allow you to arrange a conference with the main points covered. 4 - 5 months before the conference: Gather the team and set up regular meetings Take notes during meetings, for example like this Decide a date Decide on the size (multiple tracks, 2 days) Test and decide on a streaming platform Invite Keynote speakers Setup a web page 2 - 3 months before the conference: Open call for proposals Social media coverage, email ads Publish on social media reminders Contact sponsors, sync expectations Keynote announcement Close CFP and decide on talks/workshops 1 month before the conference: Increase meeting frequency Open registration Create schedule &amp; sync with speakers Set up broadcasts, background, links Publish schedule Set up participant engagement (give away, Slack) Publish on social media reminders 2 weeks before the conference: Volunteer On-boarding Calendar reminders during conference in Slack Speakers Rehearsals Publish on social media reminders 1 week before the conference: Prepare opening, closing and moderation Close Registration Prepare social media coverage during the conference Publish on social media reminders Design and prepare preliminary feedback form Clarify team communication and responsibilities Conference day: Go live Have fun Create conversation/initiate engagement on Slack etc. Ask for feedback Debrief and celebrate</summary></entry><entry><title type="html">An Ice Cube about how I became a PyLady</title><link href="http://localhost:4000/posts/inspiration/pyladies/2020/11/01/becoming-a-pylady.html" rel="alternate" type="text/html" title="An Ice Cube about how I became a PyLady" /><published>2020-11-01T17:00:00+01:00</published><updated>2020-11-01T17:00:00+01:00</updated><id>http://localhost:4000/posts/inspiration/pyladies/2020/11/01/becoming-a-pylady</id><content type="html" xml:base="http://localhost:4000/posts/inspiration/pyladies/2020/11/01/becoming-a-pylady.html">&lt;h2&gt;Stepping into the Python community&lt;/h2&gt;
&lt;p&gt;
In spring 2019 I was ready for change. I was tired of learning alone after spending way too much time
    participating online courses about data, visualisation and machine learning. It was time to step out
    and pick up a challenge. At my workplace we had Lunch &amp; Learn now and then, an occasion where everybody
    who wanted could present a topic, while the rest were eating their wrap or salad. I presented an introduction
    to machine learning (ML) with a decision tree example. ML was and is still one of my major interest but I
    didn’t use it in my actual work as a software programmer.&lt;br&gt;
    The presentation went very well and I received a lot of feedback and tips what to explore next. It even lead
    through an internal project where we were using an ML algorithm for data classification, that I was leading.
&lt;/p&gt;
&lt;p&gt;
Before my talk I joined PyLadies, a non-binary mentorship group for Python programmers and thought I could give a
    similar presentation there. I reached out to Éléonore who was organising events regularly to know if this would
    be a topic of interest. I had recently joined PyLadies and really liked the atmosphere of respect, curiosity
    and allowing members to try things out.
After the presentation the Éléonore asked me if I wanted to arrange similar events in the future and without
    thinking I answered “Yes sure, why not?!&quot;. I didn’t know how to do that and what that means. However I had
    a lot of trust that I would get the support that I needed.
&lt;/p&gt;
&lt;p&gt;
Easy as that, suddenly I was in. And since then I organised events and had the goal to meet at least once a month.
    During events I got asked by speakers that wanted to present and contacted companies that were interested in
    hosting those kind of events, so there was always an event up in the pipeline. I got very glad when there were
    new PyLadies joining the organising team, so that we can do more in the future.
Through my work with PyLadies I also got in contact with PyCon Sweden, a non-profit organisation arranging an
    annual conference for the Python community in Sweden. The organiser team has a very welcoming group culture,
    where people decide which tasks and responsibilities they want to take over. Members get a lot of trust and
    freedom in doing their tasks. This year I joined for the second time and I was picking up new tasks and took
    more ownership, which makes me feel even more involved in the local Python community.
&lt;/p&gt;
&lt;p&gt;
With the pandemic situations limiting the options to meet up most events have moved online. Since we don’t have the
    natural way of meeting and chatting at PyLadies I am now reaching out to persons that I know have something
    interesting to present.
To adapt to that new situation and continue organising the events and keep the atmosphere of learning and exploring
    I explored with the concept of the “PyLadies Online Mingle” where we can talk about ideas, tech and whatever
    comes in mind. At one of those events I found one brave member alias magicandcode who wanted to give a talk and
    Alexandra who is currently organising a study group for data analysis in Python.
So I have high hopes that we will continue with interesting and engaging events online at least until we are able
    to run face-to-face events again.
&lt;/p&gt;
&lt;p&gt;
If you want to give a presentation at PyLadies Stockholm, feel free to reach out to me.
&lt;/p&gt;
&lt;p&gt;
All the best,
Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">Stepping into the Python community In spring 2019 I was ready for change. I was tired of learning alone after spending way too much time participating online courses about data, visualisation and machine learning. It was time to step out and pick up a challenge. At my workplace we had Lunch &amp; Learn now and then, an occasion where everybody who wanted could present a topic, while the rest were eating their wrap or salad. I presented an introduction to machine learning (ML) with a decision tree example. ML was and is still one of my major interest but I didn’t use it in my actual work as a software programmer. The presentation went very well and I received a lot of feedback and tips what to explore next. It even lead through an internal project where we were using an ML algorithm for data classification, that I was leading. Before my talk I joined PyLadies, a non-binary mentorship group for Python programmers and thought I could give a similar presentation there. I reached out to Éléonore who was organising events regularly to know if this would be a topic of interest. I had recently joined PyLadies and really liked the atmosphere of respect, curiosity and allowing members to try things out. After the presentation the Éléonore asked me if I wanted to arrange similar events in the future and without thinking I answered “Yes sure, why not?!&quot;. I didn’t know how to do that and what that means. However I had a lot of trust that I would get the support that I needed. Easy as that, suddenly I was in. And since then I organised events and had the goal to meet at least once a month. During events I got asked by speakers that wanted to present and contacted companies that were interested in hosting those kind of events, so there was always an event up in the pipeline. I got very glad when there were new PyLadies joining the organising team, so that we can do more in the future. Through my work with PyLadies I also got in contact with PyCon Sweden, a non-profit organisation arranging an annual conference for the Python community in Sweden. The organiser team has a very welcoming group culture, where people decide which tasks and responsibilities they want to take over. Members get a lot of trust and freedom in doing their tasks. This year I joined for the second time and I was picking up new tasks and took more ownership, which makes me feel even more involved in the local Python community. With the pandemic situations limiting the options to meet up most events have moved online. Since we don’t have the natural way of meeting and chatting at PyLadies I am now reaching out to persons that I know have something interesting to present. To adapt to that new situation and continue organising the events and keep the atmosphere of learning and exploring I explored with the concept of the “PyLadies Online Mingle” where we can talk about ideas, tech and whatever comes in mind. At one of those events I found one brave member alias magicandcode who wanted to give a talk and Alexandra who is currently organising a study group for data analysis in Python. So I have high hopes that we will continue with interesting and engaging events online at least until we are able to run face-to-face events again. If you want to give a presentation at PyLadies Stockholm, feel free to reach out to me. All the best, Christine</summary></entry><entry><title type="html">An Ice Cube about Slow Multitasking</title><link href="http://localhost:4000/posts/inspiration/mindset/2020/10/20/inspiration-slowmultitasking.html" rel="alternate" type="text/html" title="An Ice Cube about Slow Multitasking" /><published>2020-10-20T19:00:00+02:00</published><updated>2020-10-20T19:00:00+02:00</updated><id>http://localhost:4000/posts/inspiration/mindset/2020/10/20/inspiration-slowmultitasking</id><content type="html" xml:base="http://localhost:4000/posts/inspiration/mindset/2020/10/20/inspiration-slowmultitasking.html">&lt;h2&gt;An Ice Cube about Slow Multitasking&lt;/h2&gt;
&lt;p&gt;
    Recently I discovered a
    &lt;a href=&quot;https://www.ted.com/talks/tim_harford_a_powerful_way_to_unleash_your_natural_creativity/transcript&quot;&gt;
        TED talk
    &lt;/a&gt;
    by Tim Harford that inspired me. He explains the concept of slow
    multitasking as a creative tool. In a nutshell it is working on different projects over a long period
    of time. The projects could go on for weeks, months, years depending on how much time they need to be
    finished. Some never finish and that is also okay.
&lt;/p&gt;
&lt;p&gt;
    I love this concept! My whole life I was struggling to limit my interests because I though you can only be
    good at something if I focus on it fully. The way ordinary careers are structured by finishing school,
    selecting a profession and pursuing one path until retirement always freaked me out. I wanted to see life in a
    continuous exploration. Throughout my studies and later my work days I had a lot of ideas and interests
    popping up in my head. I thought I could become a piano player, a painter, a photographer, a surfer, a writer
    or a machine learning pioneer. I wanted to be everything but I stopped exploring the sideways because I thought
    these activities would be misleading and stealing time from my actual tasks that I have to do to become a better
    developer.
&lt;/p&gt;
&lt;p&gt;
    Life is not limited to one career path and a job title. With the concept of slow multitasking I no longer feel
    like have to limit myself and instead I can can allocate time and energy for projects I am interested in.
    My best example is this blog. Because for being creative it is not important
    if you think about doing one certain thing the rest of your life. Instead it is important that you start doing
    something in the first place and let your passion drive you on the way.
&lt;/p&gt;
&lt;p&gt;
    Think about it. What will your passion project be for the next weeks? And why don't just start today?
&lt;/p&gt;
&lt;p&gt;
    All the best,
    &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">An Ice Cube about Slow Multitasking Recently I discovered a TED talk by Tim Harford that inspired me. He explains the concept of slow multitasking as a creative tool. In a nutshell it is working on different projects over a long period of time. The projects could go on for weeks, months, years depending on how much time they need to be finished. Some never finish and that is also okay. I love this concept! My whole life I was struggling to limit my interests because I though you can only be good at something if I focus on it fully. The way ordinary careers are structured by finishing school, selecting a profession and pursuing one path until retirement always freaked me out. I wanted to see life in a continuous exploration. Throughout my studies and later my work days I had a lot of ideas and interests popping up in my head. I thought I could become a piano player, a painter, a photographer, a surfer, a writer or a machine learning pioneer. I wanted to be everything but I stopped exploring the sideways because I thought these activities would be misleading and stealing time from my actual tasks that I have to do to become a better developer. Life is not limited to one career path and a job title. With the concept of slow multitasking I no longer feel like have to limit myself and instead I can can allocate time and energy for projects I am interested in. My best example is this blog. Because for being creative it is not important if you think about doing one certain thing the rest of your life. Instead it is important that you start doing something in the first place and let your passion drive you on the way. Think about it. What will your passion project be for the next weeks? And why don't just start today? All the best, Christine</summary></entry><entry><title type="html">An Ice Cube about Grit</title><link href="http://localhost:4000/posts/inspiration/mindset/2020/10/20/inspiration-grit.html" rel="alternate" type="text/html" title="An Ice Cube about Grit" /><published>2020-10-20T18:00:00+02:00</published><updated>2020-10-20T18:00:00+02:00</updated><id>http://localhost:4000/posts/inspiration/mindset/2020/10/20/inspiration-grit</id><content type="html" xml:base="http://localhost:4000/posts/inspiration/mindset/2020/10/20/inspiration-grit.html">&lt;h2&gt;An Ice Cube about Grit&lt;/h2&gt;
&lt;p&gt;
    Programming is a challenge for the mind. Not only because of the complexity of systems or features we are building,
    but also because of the setup. Most people program alone and that not always by choice. Many teams
    I have seen split up problems into smaller tasks that get implemented by one person each. The idea seems nice.
    We have a lot of work and by the divide and conquer approach we work faster towards the common goal.
&lt;/p&gt;
&lt;p&gt;
    The drawback of this setup is, that this follows a lot of alone time with focus on getting thoughts into code.
    With code comes bugs and with more bugs and more code comes more and more frustration.
    And frustration was never known to be a constructive driver for qualitative programming but rather nourishes
    self-doubt. Like a tiny voice telling us that we are an imposter, that we are not as smart as our peers and
    should have become travel bloggers instead of a developers.
&lt;/p&gt;
&lt;p&gt;
    Heads up, many of us have been there too. And will end up there again.
&lt;/p&gt;
&lt;p&gt;
    But what to do?
    How do we stay on the problem anyway, find the cause of bugs or continue
    coding until everything work as we want it and not just throw the towel into the ring?
&lt;/p&gt;
&lt;p&gt;
    Recently I stumbled over Angela Duckworth’s TED talk about GRIT. She studies the reason that makes people successful and why.
    Are there common patterns that apply to those people?
    What do they do differently than others?
&lt;/p&gt;
&lt;p&gt;
    She found out that there is a relation of talent, effort and skill.
    With an initial talent we need less effort to learn a certain skill, but if we put a lot of effort into
    learning, talent can be outperformed. The motivation to go the extra mile and put effort into improvement
    she describes as grit, the combination of passion and perseverance, the will to push forward to become better.
&lt;/p&gt;
&lt;p&gt;
    Isn't that great news?
&lt;/p&gt;
&lt;p&gt;
    I found her description of grit inspiring, because it destroys the finality of learning and its dependency
    on talent. The brain is plastic. It has the ability to adapt and change. So, if you have a vision of your
    goal and spend the energy to progress and improve you will go further and further and improve your skill.
    &lt;br&gt;
    Programming is a skill like any other. With enough time and a curious mind, you will master it and fix the bugs.
&lt;/p&gt;
&lt;p&gt;
    Keep that in mind when frustration is building up again and you feel like giving up.
    It's yet another step on the way to the solution and you will learn a lot from this experience.
&lt;/p&gt;
&lt;p&gt;
    Check out Angela Duckworth's
    &lt;a href=&quot;https://www.ted.com/talks/angela_lee_duckworth_grit_the_power_of_passion_and_perseverance?nolanguage=en%EF%BB%BF&quot;&gt;
    TED Talk
    &lt;/a&gt;
    or the
    &lt;a href=&quot;https://www.econtalk.org/angela-duckworth-on-grit/&quot;&gt;
        conversation on EconTalks with Ross Roberts.
    &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
    All the best,
    &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">An Ice Cube about Grit Programming is a challenge for the mind. Not only because of the complexity of systems or features we are building, but also because of the setup. Most people program alone and that not always by choice. Many teams I have seen split up problems into smaller tasks that get implemented by one person each. The idea seems nice. We have a lot of work and by the divide and conquer approach we work faster towards the common goal. The drawback of this setup is, that this follows a lot of alone time with focus on getting thoughts into code. With code comes bugs and with more bugs and more code comes more and more frustration. And frustration was never known to be a constructive driver for qualitative programming but rather nourishes self-doubt. Like a tiny voice telling us that we are an imposter, that we are not as smart as our peers and should have become travel bloggers instead of a developers. Heads up, many of us have been there too. And will end up there again. But what to do? How do we stay on the problem anyway, find the cause of bugs or continue coding until everything work as we want it and not just throw the towel into the ring? Recently I stumbled over Angela Duckworth’s TED talk about GRIT. She studies the reason that makes people successful and why. Are there common patterns that apply to those people? What do they do differently than others? She found out that there is a relation of talent, effort and skill. With an initial talent we need less effort to learn a certain skill, but if we put a lot of effort into learning, talent can be outperformed. The motivation to go the extra mile and put effort into improvement she describes as grit, the combination of passion and perseverance, the will to push forward to become better. Isn't that great news? I found her description of grit inspiring, because it destroys the finality of learning and its dependency on talent. The brain is plastic. It has the ability to adapt and change. So, if you have a vision of your goal and spend the energy to progress and improve you will go further and further and improve your skill. Programming is a skill like any other. With enough time and a curious mind, you will master it and fix the bugs. Keep that in mind when frustration is building up again and you feel like giving up. It's yet another step on the way to the solution and you will learn a lot from this experience. Check out Angela Duckworth's TED Talk or the conversation on EconTalks with Ross Roberts. All the best, Christine</summary></entry><entry><title type="html">Welcome to Ice Cubes!</title><link href="http://localhost:4000/posts/welcome/intro/2020/10/18/welcome-to-ice-cubes.html" rel="alternate" type="text/html" title="Welcome to Ice Cubes!" /><published>2020-10-18T13:54:49+02:00</published><updated>2020-10-18T13:54:49+02:00</updated><id>http://localhost:4000/posts/welcome/intro/2020/10/18/welcome-to-ice-cubes</id><content type="html" xml:base="http://localhost:4000/posts/welcome/intro/2020/10/18/welcome-to-ice-cubes.html">&lt;h2&gt;Hej! And welcome on Ice Cubes!&lt;/h2&gt;
&lt;p&gt;
    My name is Christine, a software developer who besides coding in Python
    likes to make puns on her last name (Winter).
   &lt;br&gt;
    As an ambivert I also enjoy organising tech events like
    &lt;a href=&quot;https://www.meetup.com/PyLadiesStockholm/&quot;&gt;PyLadies Sthlm&lt;/a&gt;
    and &lt;a href=&quot;https://www.pycon.se&quot;&gt;PyCon Sweden&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
    I care about the people I meet and work with. Therefore I always want to
    create an atmosphere where everybody feels welcomed and connected.
    In that way we can have interesting discussions and pick up exciting
    challenges together. And most of all, we will celebrate our successes
    as well as learn new skills on the way and grow as people.
&lt;/p&gt;
&lt;p&gt;
    With this page I want to inspire you who might be interested in tech and
    just leak a bit of tools to get started. I hope you find some inspiring
    project ideas to learn tech in a fun way.
&lt;/p&gt;
&lt;p&gt;
    Again a very warm welcome and if you have any topic that you want me
    to cover, feel free to reach out via the contact form or email.
&lt;/p&gt;
&lt;p&gt;
    All the best,
    &lt;br&gt;
    Christine
&lt;/p&gt;</content><author><name></name></author><summary type="html">Hej! And welcome on Ice Cubes! My name is Christine, a software developer who besides coding in Python likes to make puns on her last name (Winter). As an ambivert I also enjoy organising tech events like PyLadies Sthlm and PyCon Sweden. I care about the people I meet and work with. Therefore I always want to create an atmosphere where everybody feels welcomed and connected. In that way we can have interesting discussions and pick up exciting challenges together. And most of all, we will celebrate our successes as well as learn new skills on the way and grow as people. With this page I want to inspire you who might be interested in tech and just leak a bit of tools to get started. I hope you find some inspiring project ideas to learn tech in a fun way. Again a very warm welcome and if you have any topic that you want me to cover, feel free to reach out via the contact form or email. All the best, Christine</summary></entry></feed>